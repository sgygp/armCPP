/*
 * LCD240128.cpp
 *
 *  Created on: 2021年1月7日
 *      Author: Administrator
 */

#include "LCD240128.h"
#include"DIANZHEN.H"

void LCD240128::LCD_Init() {
	GPIO_InitTypeDef GPIO_InitStructure;    //声明一个结构体变量，用来初始化GPIO
	//使能RCC时钟
//	RCC_APB2PeriphClockCmd(GPIO_LCDRCC, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_LCD_WR | GPIO_LCD_RD| GPIO_LCD_CE | GPIO_LCD_CD;	//S
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_Init(GPIOC, &GPIO_InitStructure);


	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2
			| GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;				//
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_LCD_LED ;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_ResetBits(GPIOB, GPIO_LCD_LED);	//开背景灯

	GPIO_SetBits(GPIOC, GPIO_LCD_WR);
	GPIO_SetBits(GPIOC, GPIO_LCD_RD);
	set();

}
void LCD240128::set() {
	WriteData1(0x00);
	WriteData1(0x00);
	WriteCommad(0x42);	/////////
	WriteData1(0x1e);
	WriteData1(0x00);
	WriteCommad(0x43);	/////////
	WriteCommad(0x80);
	WriteCommad(0x98);	/////////

}
void LCD240128::Clear() {
	set();
	Fill(0, 0, 30, 128, 0);
}
void LCD240128::Fill(u8 x, u8 y, u8 x2, u8 y2, u8 z) {

	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;
	if (z)
		z = 0XFF;
	else
		z = 0x00;
	for (i = y; i < y2; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////
		for (j = x; j < x2; j++) {
			WriteData1(z);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}

}
void LCD240128::Fill_bian() {
	u16 w;
	u8 i, j;
	Fill(4, 78, 26, 79, 0);
	w = 79 * 30 + 4;
	j = w & 0xff;
	WriteData1(j);
	j = w >> 8;
	WriteData1(j);
	WriteCommad(0x24);	////////
	WriteData1(0x7f);
	WriteCommad(0xc0);	/////////

	w = 79 * 30 + 26;
	j = w & 0xff;
	WriteData1(j);
	j = w >> 8;
	WriteData1(j);
	WriteCommad(0x24);	/////////
	WriteData1(0xc0);
	WriteCommad(0xc0);	/////////
	for (i = 51; i < 79; i++) {
		w = i * 30 + 26;
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////
		WriteData1(0x40);
		WriteCommad(0xc0);	/////////
	}
}

void LCD240128::WriteHZx(u8 x, u8 y, u8 ge, const u8 *buf, bool fan)	//
		{
	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;

	for (i = 0; i < 16; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	////////
		for (j = 0; j < ge * 2; j++) {
			x = buf[(j % 2) * 16 + i + (j / 2) * (16 * 2)];
			if (fan)
				x = ~x;
			WriteData1(x);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}
}
void LCD240128::WriteTuXXYYY(u8 x, u8 y, u8 ge, u8 xx, u8 yy, const u8 *buf,
		bool fan)	//
		{
	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;

	for (i = 0; i < yy; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////设置显示缓冲区指针

		for (j = 0; j < xx * ge; j++) {
			x = buf[(j % xx) * yy + i + (j / xx) * (xx * yy)];
			if (fan)
				x = ~x;
			WriteData1(x);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}
}
void LCD240128::WriteHZd(u8 x, u8 y, u8 ge, const u8 *buf, bool fan)	//
		{
	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;

	for (i = 0; i < 48; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////

		for (j = 0; j < ge * 3; j++) {
			x = buf[(j % 3) * 48 + i + (j / 3) * (48 * 3)];
			if (fan)
				x = ~x;
			WriteData1(x);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}
}
void LCD240128::WriteShuzi(u8 x, u8 y, u8 ge, const u8 *buf, bool fan) {
	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;

	for (i = 0; i < 16; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////
		for (j = 0; j < ge; j++) {
			x = buf[i + j * 16];
			if (fan)
				x = ~x;
			WriteData1(x);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}
}
void LCD240128::WriteXY(u8 x, u8 y, u8 data1, bool fan) {
	u16 w;
	w = y * 30 + x;
	x = w & 0xff;
	y = w >> 8;
	WriteData1(x);
	WriteData1(y);
	WriteCommad(0x24);	/////////
	if (fan)
		data1 = ~data1;
	WriteData1(data1);
	WriteCommad(0xc4);	/////////
}
void LCD240128::WriteTu(u8 x, u8 y, const u8 *buf, bool fan) {
	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;

	for (i = 0; i < 72; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////
		for (j = 0; j < 8; j++) {
			x = buf[j + i * 8];
			if (fan)
				x = ~x;
			WriteData1(x);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}
}
void LCD240128::WriteTuHUAFEN(u8 x, u8 y, const u8 *buf, bool fan) {
	u8 i;
	u8 j;
	u16 w;
	w = y * 30 + x;

	for (i = 0; i < 48; i++) {
		j = w & 0xff;
		WriteData1(j);
		j = w >> 8;
		WriteData1(j);
		WriteCommad(0x24);	/////////
		for (j = 0; j < 6; j++) {
			x = buf[j * 48 + i];
			if (fan)
				x = ~x;
			WriteData1(x);
			WriteCommad(0xc0);	/////////
		}
		w = w + 30;
	}
}
void LCD240128::WriteShuju(u8 x, u8 y, float shuju, u8 xiaoshu) {
	if (shuju < 0) {
		shuju = 0 - shuju;
		WriteShuzi(x - 1, y, 1, XIAOCHAR + 16 * 13, false);
	}
	u8 text[5];
	u8 i, a;
	u16 w;
	for (i = 0; i < xiaoshu; i++)
		shuju *= 10;
	w = shuju + 0.5;
	for (i = 0; i < 5; i++) {
		a = w % 10;
		w /= 10;
		text[4 - i] = a;
	}
	for (i = 0; i < 4 - xiaoshu; i++)
		text[i] = text[i + 1];
	text[i] = 10;
	for (w = 0; w < i - 1; w++)
		if (text[w])
			break;
	if (xiaoshu)
		a = 0;
	else
		a = 1;
	Fill(x, y, x + 5, y + 16, 0);
	for (i = 0 + w; i < 5 - a; i++)
		WriteShuzi(x + i + a, y, 1, XIAOCHAR + 16 * text[i], false);

}
void LCD240128::WriteYuanma(u8 x, u8 y, u16 shuju)	//5位整数
		{
	u8 buf[5];
	for (int i = 0; i < 5; i++) {
		buf[4 - i] = shuju % 10;
		shuju /= 10;
	}
	for (int i = 0; i < 4; i++) {
		if (buf[i] != 0)
			break;
		else
			buf[i] = 15;
	}
	for (int i = 0; i < 5; i++)
		WriteShuzi(x + i, y, 1, XIAOCHAR + 16 * buf[i], false);

}
